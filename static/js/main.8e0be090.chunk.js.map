{"version":3,"sources":["components/UserForm.jsx","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["UserForm","this","props","form","validateFields","fieldsError","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","handleChange","handleDateChange","handleSubmit","firstName","lastName","hobby","fNameError","lNameError","hobbyError","dateError","layout","onSubmit","Item","validateStatus","help","rules","required","message","prefix","type","style","color","placeholder","name","setFieldsValue","onChange","label","defaultValue","moment","showToday","htmlType","disabled","Object","keys","some","field","React","Component","Form","create","Table","items","className","map","item","index","key","birthday","age","App","e","preventDefault","state","push","setState","target","value","date","dateString","years","diff","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e0be090.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Icon, Input, Button, DatePicker } from 'antd';\r\nimport moment from 'moment';\r\n\r\nfunction hasErrors(fieldsError) {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass UserForm  extends React.Component {\r\n  componentDidMount() {\r\n    // To disabled submit button at the beginning.\r\n    this.props.form.validateFields();\r\n  }\r\n\r\n  render() {\r\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\r\n    const {handleChange,handleDateChange, handleSubmit,firstName,lastName, hobby} = this.props;\r\n\r\n    // Only show error after a field is touched.\r\n    const fNameError = isFieldTouched('fName') && getFieldError('fName');\r\n    const lNameError = isFieldTouched('fName') && getFieldError('fName');\r\n    const hobbyError = isFieldTouched('hobby') && getFieldError('hobby');\r\n    const dateError = isFieldTouched('date-picker') && getFieldError('date-picker');\r\n    return (\r\n      <Form layout=\"inline\" onSubmit={handleSubmit}>\r\n        <Form.Item validateStatus={fNameError ? 'error' : ''} help={fNameError || ''}>\r\n          {getFieldDecorator('fName', {\r\n            rules: [{ required: true, message: 'Please input your First Name!' }],\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder=\"First Name\"\r\n              name=\"firstName\" \r\n              setFieldsValue={firstName} \r\n              onChange={handleChange} \r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item validateStatus={lNameError ? 'error' : ''} help={lNameError || ''}>\r\n          {getFieldDecorator('lName', {\r\n            rules: [{ required: true, message: 'Please input your Last Name!' }],\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder=\"Last Name\"\r\n              name=\"lastName\" \r\n              setFieldsValue={lastName} \r\n              onChange={handleChange} \r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"Birthday\" validateStatus={dateError ? 'error' : ''} help={dateError || ''}>\r\n          {getFieldDecorator('date-picker', {\r\n            rules: [{ required: true, message: 'Please select your date of birth!' }],\r\n          })(<DatePicker onChange={handleDateChange} defaultValue={moment()} showToday />)}\r\n        </Form.Item>\r\n        <Form.Item validateStatus={hobbyError ? 'error' : ''} help={hobbyError || ''}>\r\n          {getFieldDecorator('hobby', {\r\n            rules: [{ required: true, message: 'Please input your Hobby!' }],\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"customer-service\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder=\"Hobby\"\r\n              name=\"hobby\"\r\n              setFieldsValue={hobby}\r\n              onChange={handleChange}\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        \r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create({ name: 'horizontal_login' })(UserForm);\r\n","import React, { Component } from 'react';\r\nimport './Table.css'\r\n\r\nclass Table extends Component {\r\n\r\n    render() {\r\n        const { items } = this.props;\r\n        return (\r\n            <div>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Birthday</th>\r\n                            <th>Age (years)</th>\r\n                            <th>Hobby</th>\r\n                        </tr>\r\n                        {items.map((item, index )=> {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{item.firstName}</td>\r\n                                    <td>{item.lastName}</td>\r\n                                    <td>{item.birthday}</td>\r\n                                    <td>{item.age}</td>\r\n                                    <td>{item.hobby}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\nimport \"antd/dist/antd.css\";\nimport './App.css';\nimport moment from 'moment'\n\nimport UserForm from './components/UserForm';\nimport Table from './components/Table'\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      firstName: '',\n      lastName: '',\n      birthday: null,\n      age: '',\n      hobby: '',\n      items: [],\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const items = [...this.state.items];\n    const {firstName, lastName, birthday, age, hobby} = this.state;\n    items.push({\n      firstName,\n      lastName,\n      birthday,\n      age,\n      hobby,\n    });\n    this.setState({\n      firstName: '',\n      lastName: '',\n      birthday: null,\n      age: '',\n      hobby: '',\n      items,\n    })\n  }\n\n  handleChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value })\n  }\n\n  handleDateChange = (date, dateString) => {\n    const years = moment().diff(dateString, 'years',false);\n    this.setState({ birthday: dateString, age: years });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n\n          <UserForm \n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          firstName={this.state.firstName}\n          lastName={this.state.lastName}\n          birthday={this.state.birthday}\n          age={this.state.age}\n          hobby={this.state.hobby}\n          handleDateChange={this.handleDateChange} />\n        <Table items={this.state.items} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}